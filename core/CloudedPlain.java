package org.fleen.cloudedPlain.core;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.fleen.cloudedPlain.core.geom.Plain;
import org.fleen.cloudedPlain.core.geom.Stripe;
import org.fleen.cloudedPlain.core.stripeGenerators.StripeGenerator;

/*
 * a system of 
 *   1 plain rectangle
 *   0..n stripe rectangles
 *   0..n stripe generators
 *   a time parameter (an integer. A frame index.)
 * 
 * We increment the time (t) from 0 to whatever
 * 
 * t is a parameter for the stripes' definition, governing their location, value, etc
 * stripes generally hang out for a while, maybe sweeping across the plain, maybe just standing there or whatever, then get destroyed.
 * 
 * t also governs the behavior of our stripe generators. Telling them to create a stripe or another generator or kill themselves or something
 * 
 * we also provide various analysis methods for the system, for example getting the intersection squares
 * 
 */
public class CloudedPlain{
  
  /*
   * ################################
   * CONSTRUCTOR
   * ################################
   */
  
  public CloudedPlain(int w,int h,StripeGenerator g){
    initPlain(w,h);
    generator=g;}
 
  /*
   * ################################
   * STAGE
   * ################################
   */
  
  Plain plain;
  
  public void initPlain(int w,int h){
    plain=new Plain(w,h);}
  
  /*
   * ################################
   * STRIPES
   * ################################
   */
  
  /*
   * All the Stripes generated by the generator, or the generator's generators, etc
   * They are generated, do their thing, then signal to be destroyed
   */
  public List<Stripe> stripes=new ArrayList<Stripe>();  
  
  /*
   * ################################
   * GENERATORS
   * ################################
   */
  
  /*
   * this is the plain's root stripe generator. The final authority on stripe generation.
   * the plain contains one generator, which may refer to other generators, and so on, treewise
   */
  public StripeGenerator generator=null;

  
  public void setGenerator(StripeGenerator g){
    generator=g;
    g.setPlain(this);}
  
  /*
   * ################################
   * FRAME
   * 60 frames per second
   * each frame encompasses 1/60th of a second
   * ################################
   */
  
  public int frameindex;
  
  public void incrementFrame(){
    generateStripes();
    destroyStripes();
    frameindex++;}
  
  /*
   * for each stripe generator, conditionally generate 0..n stripes
   */
  void generateStripes(){
    List<Stripe> newstripes=generator.generate();
    stripes.addAll(newstripes);}
  
  /*
   * get the stripes that are ready to be destroyed
   * remove them from the stripes list
   */
  void destroyStripes(){
    Iterator<Stripe> i=stripes.iterator();
    Stripe c;
    int d=0;
    while(i.hasNext()){
      c=i.next();
      if(c.destroyMe()){
        i.remove();
        d++;}}
    System.out.println("destroyed : "+d);}
  
}
